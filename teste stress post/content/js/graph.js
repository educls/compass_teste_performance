/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 5321.0, "series": [{"data": [[0.0, 3.0], [0.1, 11.0], [0.2, 18.0], [0.3, 22.0], [0.4, 27.0], [0.5, 33.0], [0.6, 37.0], [0.7, 41.0], [0.8, 44.0], [0.9, 47.0], [1.0, 51.0], [1.1, 57.0], [1.2, 62.0], [1.3, 66.0], [1.4, 72.0], [1.5, 77.0], [1.6, 82.0], [1.7, 88.0], [1.8, 93.0], [1.9, 98.0], [2.0, 106.0], [2.1, 115.0], [2.2, 120.0], [2.3, 126.0], [2.4, 133.0], [2.5, 137.0], [2.6, 143.0], [2.7, 148.0], [2.8, 152.0], [2.9, 158.0], [3.0, 163.0], [3.1, 168.0], [3.2, 173.0], [3.3, 179.0], [3.4, 185.0], [3.5, 190.0], [3.6, 194.0], [3.7, 203.0], [3.8, 214.0], [3.9, 221.0], [4.0, 227.0], [4.1, 235.0], [4.2, 245.0], [4.3, 252.0], [4.4, 257.0], [4.5, 261.0], [4.6, 268.0], [4.7, 276.0], [4.8, 280.0], [4.9, 288.0], [5.0, 300.0], [5.1, 308.0], [5.2, 319.0], [5.3, 327.0], [5.4, 332.0], [5.5, 338.0], [5.6, 343.0], [5.7, 349.0], [5.8, 356.0], [5.9, 366.0], [6.0, 374.0], [6.1, 380.0], [6.2, 387.0], [6.3, 393.0], [6.4, 398.0], [6.5, 404.0], [6.6, 409.0], [6.7, 415.0], [6.8, 423.0], [6.9, 429.0], [7.0, 436.0], [7.1, 441.0], [7.2, 447.0], [7.3, 450.0], [7.4, 454.0], [7.5, 458.0], [7.6, 461.0], [7.7, 464.0], [7.8, 468.0], [7.9, 473.0], [8.0, 479.0], [8.1, 487.0], [8.2, 490.0], [8.3, 492.0], [8.4, 496.0], [8.5, 500.0], [8.6, 507.0], [8.7, 511.0], [8.8, 516.0], [8.9, 519.0], [9.0, 523.0], [9.1, 527.0], [9.2, 531.0], [9.3, 535.0], [9.4, 540.0], [9.5, 543.0], [9.6, 547.0], [9.7, 553.0], [9.8, 558.0], [9.9, 564.0], [10.0, 569.0], [10.1, 575.0], [10.2, 578.0], [10.3, 582.0], [10.4, 586.0], [10.5, 589.0], [10.6, 593.0], [10.7, 596.0], [10.8, 602.0], [10.9, 606.0], [11.0, 609.0], [11.1, 615.0], [11.2, 618.0], [11.3, 625.0], [11.4, 631.0], [11.5, 637.0], [11.6, 644.0], [11.7, 651.0], [11.8, 660.0], [11.9, 665.0], [12.0, 668.0], [12.1, 672.0], [12.2, 676.0], [12.3, 681.0], [12.4, 684.0], [12.5, 688.0], [12.6, 693.0], [12.7, 696.0], [12.8, 702.0], [12.9, 710.0], [13.0, 716.0], [13.1, 720.0], [13.2, 722.0], [13.3, 725.0], [13.4, 729.0], [13.5, 734.0], [13.6, 740.0], [13.7, 743.0], [13.8, 745.0], [13.9, 747.0], [14.0, 752.0], [14.1, 763.0], [14.2, 769.0], [14.3, 775.0], [14.4, 778.0], [14.5, 782.0], [14.6, 786.0], [14.7, 789.0], [14.8, 792.0], [14.9, 795.0], [15.0, 800.0], [15.1, 804.0], [15.2, 807.0], [15.3, 810.0], [15.4, 812.0], [15.5, 816.0], [15.6, 824.0], [15.7, 831.0], [15.8, 835.0], [15.9, 838.0], [16.0, 841.0], [16.1, 843.0], [16.2, 846.0], [16.3, 849.0], [16.4, 852.0], [16.5, 857.0], [16.6, 861.0], [16.7, 865.0], [16.8, 871.0], [16.9, 875.0], [17.0, 880.0], [17.1, 883.0], [17.2, 886.0], [17.3, 889.0], [17.4, 892.0], [17.5, 894.0], [17.6, 899.0], [17.7, 904.0], [17.8, 913.0], [17.9, 922.0], [18.0, 925.0], [18.1, 928.0], [18.2, 930.0], [18.3, 933.0], [18.4, 935.0], [18.5, 937.0], [18.6, 940.0], [18.7, 943.0], [18.8, 945.0], [18.9, 950.0], [19.0, 952.0], [19.1, 955.0], [19.2, 958.0], [19.3, 962.0], [19.4, 964.0], [19.5, 966.0], [19.6, 969.0], [19.7, 972.0], [19.8, 975.0], [19.9, 978.0], [20.0, 980.0], [20.1, 982.0], [20.2, 984.0], [20.3, 986.0], [20.4, 989.0], [20.5, 992.0], [20.6, 994.0], [20.7, 997.0], [20.8, 1001.0], [20.9, 1003.0], [21.0, 1007.0], [21.1, 1010.0], [21.2, 1012.0], [21.3, 1015.0], [21.4, 1017.0], [21.5, 1022.0], [21.6, 1025.0], [21.7, 1030.0], [21.8, 1034.0], [21.9, 1040.0], [22.0, 1048.0], [22.1, 1054.0], [22.2, 1056.0], [22.3, 1061.0], [22.4, 1069.0], [22.5, 1077.0], [22.6, 1087.0], [22.7, 1176.0], [22.8, 1250.0], [22.9, 1279.0], [23.0, 1302.0], [23.1, 1313.0], [23.2, 1322.0], [23.3, 1335.0], [23.4, 1341.0], [23.5, 1351.0], [23.6, 1358.0], [23.7, 1366.0], [23.8, 1374.0], [23.9, 1385.0], [24.0, 1391.0], [24.1, 1397.0], [24.2, 1403.0], [24.3, 1406.0], [24.4, 1410.0], [24.5, 1414.0], [24.6, 1418.0], [24.7, 1420.0], [24.8, 1423.0], [24.9, 1426.0], [25.0, 1431.0], [25.1, 1435.0], [25.2, 1441.0], [25.3, 1445.0], [25.4, 1449.0], [25.5, 1453.0], [25.6, 1455.0], [25.7, 1458.0], [25.8, 1460.0], [25.9, 1462.0], [26.0, 1464.0], [26.1, 1468.0], [26.2, 1470.0], [26.3, 1471.0], [26.4, 1473.0], [26.5, 1476.0], [26.6, 1479.0], [26.7, 1481.0], [26.8, 1483.0], [26.9, 1485.0], [27.0, 1487.0], [27.1, 1490.0], [27.2, 1492.0], [27.3, 1495.0], [27.4, 1497.0], [27.5, 1499.0], [27.6, 1502.0], [27.7, 1505.0], [27.8, 1508.0], [27.9, 1510.0], [28.0, 1513.0], [28.1, 1516.0], [28.2, 1519.0], [28.3, 1521.0], [28.4, 1524.0], [28.5, 1527.0], [28.6, 1531.0], [28.7, 1534.0], [28.8, 1538.0], [28.9, 1541.0], [29.0, 1545.0], [29.1, 1549.0], [29.2, 1552.0], [29.3, 1554.0], [29.4, 1556.0], [29.5, 1558.0], [29.6, 1561.0], [29.7, 1563.0], [29.8, 1566.0], [29.9, 1572.0], [30.0, 1576.0], [30.1, 1581.0], [30.2, 1585.0], [30.3, 1589.0], [30.4, 1594.0], [30.5, 1598.0], [30.6, 1602.0], [30.7, 1610.0], [30.8, 1616.0], [30.9, 1621.0], [31.0, 1624.0], [31.1, 1626.0], [31.2, 1629.0], [31.3, 1634.0], [31.4, 1638.0], [31.5, 1642.0], [31.6, 1645.0], [31.7, 1648.0], [31.8, 1651.0], [31.9, 1654.0], [32.0, 1659.0], [32.1, 1662.0], [32.2, 1668.0], [32.3, 1671.0], [32.4, 1677.0], [32.5, 1683.0], [32.6, 1687.0], [32.7, 1690.0], [32.8, 1695.0], [32.9, 1701.0], [33.0, 1705.0], [33.1, 1708.0], [33.2, 1711.0], [33.3, 1714.0], [33.4, 1717.0], [33.5, 1721.0], [33.6, 1725.0], [33.7, 1728.0], [33.8, 1731.0], [33.9, 1736.0], [34.0, 1744.0], [34.1, 1751.0], [34.2, 1758.0], [34.3, 1763.0], [34.4, 1770.0], [34.5, 1776.0], [34.6, 1779.0], [34.7, 1783.0], [34.8, 1786.0], [34.9, 1790.0], [35.0, 1794.0], [35.1, 1799.0], [35.2, 1805.0], [35.3, 1810.0], [35.4, 1814.0], [35.5, 1817.0], [35.6, 1822.0], [35.7, 1827.0], [35.8, 1831.0], [35.9, 1834.0], [36.0, 1838.0], [36.1, 1843.0], [36.2, 1847.0], [36.3, 1850.0], [36.4, 1854.0], [36.5, 1859.0], [36.6, 1863.0], [36.7, 1869.0], [36.8, 1875.0], [36.9, 1879.0], [37.0, 1883.0], [37.1, 1886.0], [37.2, 1889.0], [37.3, 1892.0], [37.4, 1895.0], [37.5, 1900.0], [37.6, 1905.0], [37.7, 1910.0], [37.8, 1915.0], [37.9, 1923.0], [38.0, 1931.0], [38.1, 1935.0], [38.2, 1937.0], [38.3, 1941.0], [38.4, 1947.0], [38.5, 1952.0], [38.6, 1956.0], [38.7, 1963.0], [38.8, 1966.0], [38.9, 1969.0], [39.0, 1972.0], [39.1, 1976.0], [39.2, 1978.0], [39.3, 1981.0], [39.4, 1985.0], [39.5, 1989.0], [39.6, 1993.0], [39.7, 1996.0], [39.8, 1999.0], [39.9, 2002.0], [40.0, 2006.0], [40.1, 2009.0], [40.2, 2010.0], [40.3, 2013.0], [40.4, 2016.0], [40.5, 2019.0], [40.6, 2021.0], [40.7, 2022.0], [40.8, 2024.0], [40.9, 2027.0], [41.0, 2029.0], [41.1, 2031.0], [41.2, 2032.0], [41.3, 2035.0], [41.4, 2037.0], [41.5, 2038.0], [41.6, 2040.0], [41.7, 2043.0], [41.8, 2047.0], [41.9, 2051.0], [42.0, 2056.0], [42.1, 2061.0], [42.2, 2066.0], [42.3, 2070.0], [42.4, 2073.0], [42.5, 2079.0], [42.6, 2082.0], [42.7, 2084.0], [42.8, 2087.0], [42.9, 2090.0], [43.0, 2092.0], [43.1, 2096.0], [43.2, 2100.0], [43.3, 2102.0], [43.4, 2107.0], [43.5, 2111.0], [43.6, 2116.0], [43.7, 2120.0], [43.8, 2126.0], [43.9, 2130.0], [44.0, 2132.0], [44.1, 2136.0], [44.2, 2140.0], [44.3, 2143.0], [44.4, 2149.0], [44.5, 2153.0], [44.6, 2159.0], [44.7, 2164.0], [44.8, 2169.0], [44.9, 2172.0], [45.0, 2175.0], [45.1, 2180.0], [45.2, 2185.0], [45.3, 2191.0], [45.4, 2195.0], [45.5, 2200.0], [45.6, 2204.0], [45.7, 2208.0], [45.8, 2214.0], [45.9, 2222.0], [46.0, 2234.0], [46.1, 2244.0], [46.2, 2263.0], [46.3, 2271.0], [46.4, 2281.0], [46.5, 2287.0], [46.6, 2293.0], [46.7, 2299.0], [46.8, 2306.0], [46.9, 2310.0], [47.0, 2315.0], [47.1, 2319.0], [47.2, 2325.0], [47.3, 2333.0], [47.4, 2349.0], [47.5, 2360.0], [47.6, 2367.0], [47.7, 2373.0], [47.8, 2377.0], [47.9, 2385.0], [48.0, 2389.0], [48.1, 2393.0], [48.2, 2397.0], [48.3, 2401.0], [48.4, 2406.0], [48.5, 2410.0], [48.6, 2414.0], [48.7, 2416.0], [48.8, 2419.0], [48.9, 2423.0], [49.0, 2429.0], [49.1, 2432.0], [49.2, 2437.0], [49.3, 2444.0], [49.4, 2448.0], [49.5, 2454.0], [49.6, 2460.0], [49.7, 2465.0], [49.8, 2470.0], [49.9, 2476.0], [50.0, 2481.0], [50.1, 2484.0], [50.2, 2487.0], [50.3, 2490.0], [50.4, 2493.0], [50.5, 2497.0], [50.6, 2504.0], [50.7, 2509.0], [50.8, 2513.0], [50.9, 2518.0], [51.0, 2521.0], [51.1, 2528.0], [51.2, 2534.0], [51.3, 2540.0], [51.4, 2544.0], [51.5, 2547.0], [51.6, 2549.0], [51.7, 2553.0], [51.8, 2556.0], [51.9, 2559.0], [52.0, 2561.0], [52.1, 2565.0], [52.2, 2571.0], [52.3, 2578.0], [52.4, 2583.0], [52.5, 2587.0], [52.6, 2594.0], [52.7, 2601.0], [52.8, 2608.0], [52.9, 2615.0], [53.0, 2622.0], [53.1, 2626.0], [53.2, 2631.0], [53.3, 2636.0], [53.4, 2642.0], [53.5, 2647.0], [53.6, 2651.0], [53.7, 2655.0], [53.8, 2662.0], [53.9, 2667.0], [54.0, 2675.0], [54.1, 2680.0], [54.2, 2685.0], [54.3, 2688.0], [54.4, 2691.0], [54.5, 2698.0], [54.6, 2702.0], [54.7, 2708.0], [54.8, 2714.0], [54.9, 2720.0], [55.0, 2725.0], [55.1, 2730.0], [55.2, 2736.0], [55.3, 2740.0], [55.4, 2745.0], [55.5, 2748.0], [55.6, 2751.0], [55.7, 2756.0], [55.8, 2762.0], [55.9, 2767.0], [56.0, 2774.0], [56.1, 2783.0], [56.2, 2791.0], [56.3, 2798.0], [56.4, 2804.0], [56.5, 2810.0], [56.6, 2820.0], [56.7, 2827.0], [56.8, 2834.0], [56.9, 2841.0], [57.0, 2851.0], [57.1, 2857.0], [57.2, 2863.0], [57.3, 2868.0], [57.4, 2872.0], [57.5, 2875.0], [57.6, 2878.0], [57.7, 2881.0], [57.8, 2885.0], [57.9, 2888.0], [58.0, 2891.0], [58.1, 2893.0], [58.2, 2896.0], [58.3, 2900.0], [58.4, 2903.0], [58.5, 2907.0], [58.6, 2913.0], [58.7, 2917.0], [58.8, 2920.0], [58.9, 2923.0], [59.0, 2927.0], [59.1, 2931.0], [59.2, 2937.0], [59.3, 2940.0], [59.4, 2946.0], [59.5, 2953.0], [59.6, 2959.0], [59.7, 2965.0], [59.8, 2969.0], [59.9, 2972.0], [60.0, 2974.0], [60.1, 2976.0], [60.2, 2980.0], [60.3, 2983.0], [60.4, 2987.0], [60.5, 2993.0], [60.6, 2996.0], [60.7, 3001.0], [60.8, 3006.0], [60.9, 3008.0], [61.0, 3010.0], [61.1, 3014.0], [61.2, 3019.0], [61.3, 3027.0], [61.4, 3034.0], [61.5, 3042.0], [61.6, 3058.0], [61.7, 3067.0], [61.8, 3073.0], [61.9, 3080.0], [62.0, 3087.0], [62.1, 3091.0], [62.2, 3095.0], [62.3, 3100.0], [62.4, 3103.0], [62.5, 3105.0], [62.6, 3109.0], [62.7, 3114.0], [62.8, 3119.0], [62.9, 3122.0], [63.0, 3126.0], [63.1, 3129.0], [63.2, 3132.0], [63.3, 3135.0], [63.4, 3138.0], [63.5, 3141.0], [63.6, 3146.0], [63.7, 3150.0], [63.8, 3154.0], [63.9, 3159.0], [64.0, 3166.0], [64.1, 3170.0], [64.2, 3176.0], [64.3, 3182.0], [64.4, 3190.0], [64.5, 3204.0], [64.6, 3213.0], [64.7, 3223.0], [64.8, 3233.0], [64.9, 3244.0], [65.0, 3255.0], [65.1, 3265.0], [65.2, 3271.0], [65.3, 3278.0], [65.4, 3283.0], [65.5, 3287.0], [65.6, 3295.0], [65.7, 3306.0], [65.8, 3313.0], [65.9, 3319.0], [66.0, 3328.0], [66.1, 3340.0], [66.2, 3352.0], [66.3, 3362.0], [66.4, 3368.0], [66.5, 3376.0], [66.6, 3383.0], [66.7, 3390.0], [66.8, 3397.0], [66.9, 3403.0], [67.0, 3413.0], [67.1, 3419.0], [67.2, 3432.0], [67.3, 3438.0], [67.4, 3443.0], [67.5, 3448.0], [67.6, 3454.0], [67.7, 3460.0], [67.8, 3467.0], [67.9, 3473.0], [68.0, 3478.0], [68.1, 3484.0], [68.2, 3488.0], [68.3, 3491.0], [68.4, 3495.0], [68.5, 3500.0], [68.6, 3507.0], [68.7, 3510.0], [68.8, 3516.0], [68.9, 3518.0], [69.0, 3522.0], [69.1, 3526.0], [69.2, 3530.0], [69.3, 3533.0], [69.4, 3537.0], [69.5, 3540.0], [69.6, 3543.0], [69.7, 3547.0], [69.8, 3551.0], [69.9, 3554.0], [70.0, 3559.0], [70.1, 3561.0], [70.2, 3566.0], [70.3, 3572.0], [70.4, 3576.0], [70.5, 3579.0], [70.6, 3584.0], [70.7, 3588.0], [70.8, 3592.0], [70.9, 3596.0], [71.0, 3598.0], [71.1, 3602.0], [71.2, 3607.0], [71.3, 3612.0], [71.4, 3616.0], [71.5, 3622.0], [71.6, 3626.0], [71.7, 3631.0], [71.8, 3639.0], [71.9, 3644.0], [72.0, 3647.0], [72.1, 3652.0], [72.2, 3656.0], [72.3, 3662.0], [72.4, 3668.0], [72.5, 3673.0], [72.6, 3679.0], [72.7, 3684.0], [72.8, 3687.0], [72.9, 3689.0], [73.0, 3695.0], [73.1, 3699.0], [73.2, 3705.0], [73.3, 3712.0], [73.4, 3718.0], [73.5, 3724.0], [73.6, 3730.0], [73.7, 3733.0], [73.8, 3735.0], [73.9, 3738.0], [74.0, 3744.0], [74.1, 3748.0], [74.2, 3752.0], [74.3, 3755.0], [74.4, 3758.0], [74.5, 3762.0], [74.6, 3767.0], [74.7, 3771.0], [74.8, 3776.0], [74.9, 3784.0], [75.0, 3792.0], [75.1, 3802.0], [75.2, 3810.0], [75.3, 3821.0], [75.4, 3826.0], [75.5, 3832.0], [75.6, 3840.0], [75.7, 3855.0], [75.8, 3867.0], [75.9, 3873.0], [76.0, 3879.0], [76.1, 3885.0], [76.2, 3889.0], [76.3, 3894.0], [76.4, 3899.0], [76.5, 3903.0], [76.6, 3906.0], [76.7, 3909.0], [76.8, 3912.0], [76.9, 3916.0], [77.0, 3919.0], [77.1, 3923.0], [77.2, 3927.0], [77.3, 3930.0], [77.4, 3936.0], [77.5, 3939.0], [77.6, 3941.0], [77.7, 3944.0], [77.8, 3946.0], [77.9, 3949.0], [78.0, 3952.0], [78.1, 3957.0], [78.2, 3960.0], [78.3, 3963.0], [78.4, 3967.0], [78.5, 3970.0], [78.6, 3973.0], [78.7, 3977.0], [78.8, 3983.0], [78.9, 3987.0], [79.0, 3991.0], [79.1, 3997.0], [79.2, 3999.0], [79.3, 4002.0], [79.4, 4004.0], [79.5, 4006.0], [79.6, 4010.0], [79.7, 4014.0], [79.8, 4017.0], [79.9, 4022.0], [80.0, 4027.0], [80.1, 4031.0], [80.2, 4036.0], [80.3, 4040.0], [80.4, 4044.0], [80.5, 4048.0], [80.6, 4052.0], [80.7, 4055.0], [80.8, 4057.0], [80.9, 4059.0], [81.0, 4061.0], [81.1, 4064.0], [81.2, 4067.0], [81.3, 4071.0], [81.4, 4075.0], [81.5, 4078.0], [81.6, 4082.0], [81.7, 4087.0], [81.8, 4093.0], [81.9, 4098.0], [82.0, 4101.0], [82.1, 4104.0], [82.2, 4108.0], [82.3, 4112.0], [82.4, 4116.0], [82.5, 4121.0], [82.6, 4126.0], [82.7, 4135.0], [82.8, 4142.0], [82.9, 4145.0], [83.0, 4151.0], [83.1, 4155.0], [83.2, 4160.0], [83.3, 4166.0], [83.4, 4169.0], [83.5, 4175.0], [83.6, 4178.0], [83.7, 4180.0], [83.8, 4183.0], [83.9, 4187.0], [84.0, 4191.0], [84.1, 4195.0], [84.2, 4199.0], [84.3, 4201.0], [84.4, 4204.0], [84.5, 4207.0], [84.6, 4213.0], [84.7, 4219.0], [84.8, 4223.0], [84.9, 4226.0], [85.0, 4230.0], [85.1, 4233.0], [85.2, 4236.0], [85.3, 4237.0], [85.4, 4239.0], [85.5, 4241.0], [85.6, 4247.0], [85.7, 4251.0], [85.8, 4258.0], [85.9, 4267.0], [86.0, 4271.0], [86.1, 4277.0], [86.2, 4283.0], [86.3, 4288.0], [86.4, 4293.0], [86.5, 4296.0], [86.6, 4300.0], [86.7, 4303.0], [86.8, 4306.0], [86.9, 4308.0], [87.0, 4311.0], [87.1, 4314.0], [87.2, 4318.0], [87.3, 4321.0], [87.4, 4325.0], [87.5, 4329.0], [87.6, 4333.0], [87.7, 4336.0], [87.8, 4340.0], [87.9, 4346.0], [88.0, 4352.0], [88.1, 4357.0], [88.2, 4360.0], [88.3, 4365.0], [88.4, 4368.0], [88.5, 4373.0], [88.6, 4377.0], [88.7, 4380.0], [88.8, 4383.0], [88.9, 4389.0], [89.0, 4394.0], [89.1, 4401.0], [89.2, 4411.0], [89.3, 4419.0], [89.4, 4423.0], [89.5, 4430.0], [89.6, 4435.0], [89.7, 4443.0], [89.8, 4449.0], [89.9, 4453.0], [90.0, 4456.0], [90.1, 4460.0], [90.2, 4463.0], [90.3, 4465.0], [90.4, 4469.0], [90.5, 4474.0], [90.6, 4479.0], [90.7, 4485.0], [90.8, 4492.0], [90.9, 4497.0], [91.0, 4505.0], [91.1, 4508.0], [91.2, 4512.0], [91.3, 4516.0], [91.4, 4519.0], [91.5, 4522.0], [91.6, 4528.0], [91.7, 4533.0], [91.8, 4537.0], [91.9, 4546.0], [92.0, 4554.0], [92.1, 4559.0], [92.2, 4561.0], [92.3, 4565.0], [92.4, 4568.0], [92.5, 4572.0], [92.6, 4575.0], [92.7, 4578.0], [92.8, 4581.0], [92.9, 4588.0], [93.0, 4593.0], [93.1, 4599.0], [93.2, 4605.0], [93.3, 4618.0], [93.4, 4628.0], [93.5, 4633.0], [93.6, 4639.0], [93.7, 4646.0], [93.8, 4653.0], [93.9, 4666.0], [94.0, 4696.0], [94.1, 4729.0], [94.2, 4762.0], [94.3, 4788.0], [94.4, 4794.0], [94.5, 4807.0], [94.6, 4831.0], [94.7, 4862.0], [94.8, 4897.0], [94.9, 4927.0], [95.0, 4957.0], [95.1, 5004.0], [95.2, 5007.0], [95.3, 5009.0], [95.4, 5011.0], [95.5, 5013.0], [95.6, 5014.0], [95.7, 5016.0], [95.8, 5018.0], [95.9, 5019.0], [96.0, 5021.0], [96.1, 5022.0], [96.2, 5023.0], [96.3, 5024.0], [96.4, 5025.0], [96.5, 5026.0], [96.6, 5027.0], [96.7, 5028.0], [96.8, 5029.0], [96.9, 5030.0], [97.0, 5031.0], [97.1, 5032.0], [97.2, 5033.0], [97.3, 5034.0], [97.4, 5035.0], [97.5, 5035.0], [97.6, 5036.0], [97.7, 5037.0], [97.8, 5038.0], [97.9, 5039.0], [98.0, 5040.0], [98.1, 5041.0], [98.2, 5042.0], [98.3, 5043.0], [98.4, 5044.0], [98.5, 5045.0], [98.6, 5047.0], [98.7, 5048.0], [98.8, 5049.0], [98.9, 5051.0], [99.0, 5053.0], [99.1, 5054.0], [99.2, 5057.0], [99.3, 5059.0], [99.4, 5063.0], [99.5, 5067.0], [99.6, 5077.0], [99.7, 5086.0], [99.8, 5097.0], [99.9, 5162.0], [100.0, 5321.0]], "isOverall": false, "label": "POST - /usuarios", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 23.0, "minX": 0.0, "maxY": 3568.0, "series": [{"data": [[0.0, 1441.0], [600.0, 1492.0], [700.0, 1664.0], [800.0, 1958.0], [900.0, 2361.0], [1000.0, 1378.0], [1100.0, 74.0], [1200.0, 194.0], [1300.0, 875.0], [1400.0, 2512.0], [1500.0, 2261.0], [1600.0, 1749.0], [1700.0, 1661.0], [1800.0, 1775.0], [1900.0, 1734.0], [2000.0, 2531.0], [2100.0, 1712.0], [2300.0, 1156.0], [2200.0, 914.0], [2400.0, 1707.0], [2500.0, 1584.0], [2600.0, 1404.0], [2700.0, 1325.0], [2800.0, 1473.0], [2900.0, 1767.0], [3000.0, 1221.0], [3100.0, 1611.0], [3300.0, 896.0], [3200.0, 883.0], [3400.0, 1243.0], [3500.0, 1884.0], [3600.0, 1561.0], [3700.0, 1466.0], [3800.0, 999.0], [3900.0, 2092.0], [4000.0, 2044.0], [4100.0, 1700.0], [4200.0, 1765.0], [4300.0, 1866.0], [4600.0, 691.0], [4400.0, 1373.0], [4500.0, 1625.0], [4700.0, 324.0], [4800.0, 255.0], [4900.0, 171.0], [5000.0, 3568.0], [5100.0, 83.0], [5200.0, 23.0], [5300.0, 32.0], [100.0, 1289.0], [200.0, 1001.0], [300.0, 1063.0], [400.0, 1553.0], [500.0, 1688.0]], "isOverall": false, "label": "POST - /usuarios", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 5300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5025.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1.500ms"], [2, "Requests having \nresponse time > 1.500ms"], [3, "Requests in error"]], "maxY": 50337.0, "series": [{"data": [[0.0, 5133.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 14177.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1.500ms", "isController": false}, {"data": [[2.0, 50337.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1.500ms", "isController": false}, {"data": [[3.0, 5025.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 79.98514630332821, "minX": 1.69255686E12, "maxY": 100.0, "series": [{"data": [[1.6925574E12, 100.0], [1.6925571E12, 100.0], [1.692558E12, 100.0], [1.6925577E12, 100.0], [1.6925586E12, 100.0], [1.6925583E12, 100.0], [1.69255728E12, 100.0], [1.69255698E12, 100.0], [1.69255788E12, 100.0], [1.69255758E12, 100.0], [1.69255848E12, 100.0], [1.69255818E12, 100.0], [1.69255716E12, 100.0], [1.69255686E12, 79.98514630332821], [1.69255776E12, 100.0], [1.69255746E12, 100.0], [1.69255836E12, 100.0], [1.69255806E12, 100.0], [1.69255704E12, 100.0], [1.69255866E12, 100.0], [1.69255764E12, 100.0], [1.69255734E12, 100.0], [1.69255824E12, 100.0], [1.69255794E12, 100.0], [1.69255692E12, 100.0], [1.69255854E12, 100.0], [1.69255752E12, 100.0], [1.69255722E12, 100.0], [1.69255812E12, 100.0], [1.69255782E12, 100.0], [1.69255872E12, 96.04277643260697], [1.69255842E12, 100.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69255872E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5.639999999999999, "minX": 1.0, "maxY": 2643.625527841906, "series": [{"data": [[2.0, 209.74418604651163], [3.0, 24.529411764705884], [4.0, 277.1818181818182], [5.0, 143.71428571428572], [6.0, 26.6578947368421], [7.0, 161.61538461538458], [8.0, 24.893617021276597], [9.0, 187.29999999999998], [10.0, 148.22500000000002], [11.0, 157.4242424242424], [12.0, 206.8709677419355], [13.0, 67.29787234042553], [14.0, 204.14814814814812], [15.0, 43.74358974358974], [16.0, 72.4], [17.0, 187.62857142857143], [18.0, 88.65517241379311], [19.0, 106.0], [20.0, 148.3], [21.0, 198.7142857142857], [22.0, 93.6875], [23.0, 175.22222222222223], [24.0, 318.94117647058823], [25.0, 70.25714285714285], [26.0, 192.78571428571428], [27.0, 174.1818181818182], [28.0, 66.25925925925925], [29.0, 130.46874999999997], [30.0, 302.4888888888889], [31.0, 217.67857142857144], [32.0, 225.76470588235293], [33.0, 152.1764705882353], [34.0, 91.02272727272725], [35.0, 105.54054054054053], [36.0, 508.77272727272725], [37.0, 194.6153846153847], [38.0, 199.65789473684208], [39.0, 308.26666666666665], [40.0, 220.7450980392157], [41.0, 212.05555555555554], [42.0, 128.62222222222223], [43.0, 271.65], [44.0, 160.58490566037733], [45.0, 118.25806451612904], [46.0, 239.64583333333331], [47.0, 216.15517241379314], [48.0, 258.40000000000003], [49.0, 252.9268292682927], [50.0, 350.9411764705882], [51.0, 253.30000000000007], [52.0, 174.75000000000006], [53.0, 188.6595744680851], [54.0, 228.7], [55.0, 359.42857142857144], [56.0, 256.34375], [57.0, 260.6153846153847], [58.0, 410.42105263157896], [59.0, 218.81249999999997], [60.0, 310.258064516129], [61.0, 258.51351351351354], [62.0, 427.55555555555554], [63.0, 224.49056603773585], [64.0, 319.3478260869565], [65.0, 257.7368421052632], [66.0, 283.3898305084746], [67.0, 234.70212765957442], [68.0, 516.5625], [69.0, 575.6875], [70.0, 326.38461538461536], [71.0, 479.15789473684214], [72.0, 438.96428571428567], [73.0, 353.61904761904765], [74.0, 253.88235294117655], [75.0, 391.15909090909093], [76.0, 270.06249999999994], [77.0, 322.68333333333334], [78.0, 441.8518518518519], [79.0, 470.6521739130435], [80.0, 458.4571428571429], [81.0, 434.61538461538464], [82.0, 430.5333333333333], [83.0, 490.6071428571428], [84.0, 368.2727272727273], [85.0, 488.1851851851852], [86.0, 308.923076923077], [87.0, 332.0500000000002], [88.0, 421.22580645161304], [89.0, 367.99999999999994], [90.0, 486.6666666666667], [91.0, 393.9772727272726], [92.0, 530.6111111111111], [93.0, 546.6363636363637], [94.0, 369.83333333333337], [95.0, 339.17647058823525], [96.0, 587.8333333333333], [97.0, 440.21875], [98.0, 565.9696969696969], [99.0, 495.0357142857143], [100.0, 2643.625527841906], [1.0, 5.639999999999999]], "isOverall": false, "label": "POST - /usuarios", "isController": false}, {"data": [[97.53433683308258, 2527.8731653095847]], "isOverall": false, "label": "POST - /usuarios-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 6005.5, "minX": 1.69255686E12, "maxY": 80998.46666666666, "series": [{"data": [[1.6925574E12, 19265.75], [1.6925571E12, 29197.416666666668], [1.692558E12, 12094.833333333334], [1.6925577E12, 14156.833333333334], [1.6925586E12, 9688.7], [1.6925583E12, 11875.916666666666], [1.69255728E12, 22716.583333333332], [1.69255698E12, 80998.46666666666], [1.69255788E12, 14190.5], [1.69255758E12, 16917.5], [1.69255848E12, 11093.166666666666], [1.69255818E12, 12414.583333333334], [1.69255716E12, 26049.583333333332], [1.69255686E12, 75362.83333333333], [1.69255776E12, 12995.333333333334], [1.69255746E12, 17178.416666666668], [1.69255836E12, 11673.916666666666], [1.69255806E12, 12683.916666666666], [1.69255704E12, 33818.166666666664], [1.69255866E12, 9663.866666666667], [1.69255764E12, 16084.25], [1.69255734E12, 20452.5], [1.69255824E12, 11732.233333333334], [1.69255794E12, 13601.333333333334], [1.69255692E12, 51493.166666666664], [1.69255854E12, 10857.5], [1.69255752E12, 17254.166666666668], [1.69255722E12, 23053.25], [1.69255812E12, 12448.25], [1.69255782E12, 14308.333333333334], [1.69255872E12, 13447.933333333332], [1.69255842E12, 11093.166666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6925574E12, 12069.3], [1.6925571E12, 18287.733333333334], [1.692558E12, 7602.266666666666], [1.6925577E12, 8865.633333333333], [1.6925586E12, 6310.333333333333], [1.6925583E12, 7441.85], [1.69255728E12, 14233.083333333334], [1.69255698E12, 19721.433333333334], [1.69255788E12, 8888.683333333332], [1.69255758E12, 10598.966666666667], [1.69255848E12, 6952.45], [1.69255818E12, 7782.033333333334], [1.69255716E12, 16317.233333333334], [1.69255686E12, 47192.11666666667], [1.69255776E12, 8139.983333333334], [1.69255746E12, 10760.233333333334], [1.69255836E12, 7315.566666666667], [1.69255806E12, 7944.35], [1.69255704E12, 21181.3], [1.69255866E12, 6321.583333333333], [1.69255764E12, 10080.366666666667], [1.69255734E12, 12817.366666666667], [1.69255824E12, 7384.666666666667], [1.69255794E12, 8527.133333333333], [1.69255692E12, 32240.016666666666], [1.69255854E12, 6806.716666666666], [1.69255752E12, 10808.3], [1.69255722E12, 14437.766666666666], [1.69255812E12, 7802.383333333333], [1.69255782E12, 8964.55], [1.69255872E12, 6005.5], [1.69255842E12, 6954.516666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69255872E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 419.7433549251716, "minX": 1.69255686E12, "maxY": 5048.429883138572, "series": [{"data": [[1.6925574E12, 2607.96461336828], [1.6925571E12, 1719.127414240414], [1.692558E12, 4139.054091539532], [1.6925577E12, 3574.3799048751457], [1.6925586E12, 5015.030910609855], [1.6925583E12, 4231.67115520907], [1.69255728E12, 2219.120044460916], [1.69255698E12, 1173.920967741934], [1.69255788E12, 3584.0735468564667], [1.69255758E12, 2950.8741293532285], [1.69255848E12, 4514.161608497731], [1.69255818E12, 4114.32474576271], [1.69255716E12, 1933.4009693053304], [1.69255686E12, 419.7433549251716], [1.69255776E12, 3813.9468911917093], [1.69255746E12, 2939.0720235178815], [1.69255836E12, 4361.994232155727], [1.69255806E12, 3959.94492368945], [1.69255704E12, 1474.1485813837774], [1.69255866E12, 5048.429883138572], [1.69255764E12, 3114.766614338044], [1.69255734E12, 2438.2506172839476], [1.69255824E12, 4308.542857142852], [1.69255794E12, 3695.0525990099036], [1.69255692E12, 966.0514874141895], [1.69255854E12, 4649.690697674413], [1.69255752E12, 2948.570243902441], [1.69255722E12, 2150.7805768528624], [1.69255812E12, 4000.9310344827595], [1.69255782E12, 3514.198823529409], [1.69255872E12, 4870.632768361584], [1.69255842E12, 4400.663125948408]], "isOverall": false, "label": "POST - /usuarios", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69255872E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 419.73308018762566, "minX": 1.69255686E12, "maxY": 5048.408180300489, "series": [{"data": [[1.6925574E12, 2607.94189602447], [1.6925571E12, 1719.110694724705], [1.692558E12, 4139.037447988905], [1.6925577E12, 3574.3590963139163], [1.6925586E12, 5015.020885547207], [1.6925583E12, 4231.649184975193], [1.69255728E12, 2219.106335679887], [1.69255698E12, 1126.0165322580667], [1.69255788E12, 3584.0533807829174], [1.69255758E12, 2950.8567164179094], [1.69255848E12, 4514.125948406673], [1.69255818E12, 4114.307796610168], [1.69255716E12, 1933.3922455573509], [1.69255686E12, 419.73308018762566], [1.69255776E12, 3813.9235751295337], [1.69255746E12, 2939.0538951494414], [1.69255836E12, 4361.97116077866], [1.69255806E12, 3959.9289980092976], [1.69255704E12, 1474.135888501747], [1.69255866E12, 5048.408180300489], [1.69255764E12, 3114.748299319725], [1.69255734E12, 2438.2399176954705], [1.69255824E12, 4308.5171428571375], [1.69255794E12, 3695.0334158415853], [1.69255692E12, 966.040372670805], [1.69255854E12, 4649.672868217061], [1.69255752E12, 2948.554634146343], [1.69255722E12, 2150.7648776925917], [1.69255812E12, 4000.9053414469263], [1.69255782E12, 3514.1864705882404], [1.69255872E12, 4634.038740920099], [1.69255842E12, 4400.642640364193]], "isOverall": false, "label": "POST - /usuarios", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69255872E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.517241379310345, "minX": 1.69255686E12, "maxY": 49.54818548387104, "series": [{"data": [[1.6925574E12, 0.9108781127129766], [1.6925571E12, 1.2902853848371296], [1.692558E12, 0.7087378640776695], [1.6925577E12, 0.8121284185493455], [1.6925586E12, 0.6541353383458638], [1.6925583E12, 0.6385542168674696], [1.69255728E12, 1.0611337532419367], [1.69255698E12, 49.54818548387104], [1.69255788E12, 0.7538552787663101], [1.69255758E12, 0.6208955223880605], [1.69255848E12, 0.6631259484066773], [1.69255818E12, 0.653559322033898], [1.69255716E12, 0.5492730210016168], [1.69255686E12, 1.9198123743578328], [1.69255776E12, 0.752590673575129], [1.69255746E12, 0.8682018618324342], [1.69255836E12, 0.6301369863013697], [1.69255806E12, 0.626410086264102], [1.69255704E12, 1.3432055749128893], [1.69255866E12, 0.6310517529215361], [1.69255764E12, 0.7446363160648876], [1.69255734E12, 1.0148148148148135], [1.69255824E12, 0.7085714285714297], [1.69255794E12, 0.699257425742574], [1.69255692E12, 0.8898332788492979], [1.69255854E12, 0.6286821705426355], [1.69255752E12, 0.6975609756097565], [1.69255722E12, 0.9021540708287686], [1.69255812E12, 0.517241379310345], [1.69255782E12, 0.6982352941176471], [1.69255872E12, 0.6206618240516545], [1.69255842E12, 0.6547799696509858]], "isOverall": false, "label": "POST - /usuarios", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69255872E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.69255686E12, "maxY": 4980.0, "series": [{"data": [[1.6925574E12, 2771.0], [1.6925571E12, 2077.0], [1.692558E12, 4980.0], [1.6925577E12, 4949.0], [1.6925586E12, 4843.0], [1.6925583E12, 4420.0], [1.69255728E12, 2484.0], [1.69255698E12, 2770.0], [1.69255788E12, 3798.0], [1.69255758E12, 3123.0], [1.69255848E12, 4686.0], [1.69255818E12, 4658.0], [1.69255716E12, 2156.0], [1.69255686E12, 840.0], [1.69255776E12, 4942.0], [1.69255746E12, 3971.0], [1.69255836E12, 4586.0], [1.69255806E12, 4155.0], [1.69255704E12, 1653.0], [1.69255764E12, 3294.0], [1.69255734E12, 2605.0], [1.69255824E12, 4972.0], [1.69255794E12, 3915.0], [1.69255692E12, 4195.0], [1.69255854E12, 4958.0], [1.69255752E12, 3527.0], [1.69255722E12, 3223.0], [1.69255812E12, 4179.0], [1.69255782E12, 4138.0], [1.69255842E12, 4600.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6925574E12, 2708.0], [1.6925571E12, 1860.0], [1.692558E12, 4591.0], [1.6925577E12, 4151.0], [1.6925586E12, 4742.0], [1.6925583E12, 4303.0], [1.69255728E12, 2382.0], [1.69255698E12, 1864.6000000000004], [1.69255788E12, 3695.0], [1.69255758E12, 3016.0], [1.69255848E12, 4632.0], [1.69255818E12, 4325.8], [1.69255716E12, 2026.0], [1.69255686E12, 689.0], [1.69255776E12, 4561.0], [1.69255746E12, 3502.0], [1.69255836E12, 4518.2], [1.69255806E12, 4066.0], [1.69255704E12, 1575.0], [1.69255764E12, 3187.0], [1.69255734E12, 2548.0], [1.69255824E12, 4381.0], [1.69255794E12, 3798.0], [1.69255692E12, 1024.0], [1.69255854E12, 4836.0], [1.69255752E12, 3225.9], [1.69255722E12, 2464.0], [1.69255812E12, 4084.0], [1.69255782E12, 3624.0], [1.69255842E12, 4500.1]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6925574E12, 2756.1], [1.6925571E12, 1999.0], [1.692558E12, 4947.77], [1.6925577E12, 4822.180000000004], [1.6925586E12, 4843.0], [1.6925583E12, 4377.88], [1.69255728E12, 2440.0], [1.69255698E12, 2497.0], [1.69255788E12, 3781.3899999999994], [1.69255758E12, 3097.0], [1.69255848E12, 4668.8099999999995], [1.69255818E12, 4612.48], [1.69255716E12, 2051.0], [1.69255686E12, 796.4500000000007], [1.69255776E12, 4912.55], [1.69255746E12, 3949.0], [1.69255836E12, 4571.12], [1.69255806E12, 4130.92], [1.69255704E12, 1649.0], [1.69255764E12, 3263.88], [1.69255734E12, 2595.0], [1.69255824E12, 4953.700000000001], [1.69255794E12, 3890.83], [1.69255692E12, 3904.8100000000004], [1.69255854E12, 4954.09], [1.69255752E12, 3521.0], [1.69255722E12, 3146.6], [1.69255812E12, 4146.0], [1.69255782E12, 4096.93], [1.69255842E12, 4587.48]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6925574E12, 2741.0], [1.6925571E12, 1910.5], [1.692558E12, 4778.549999999999], [1.6925577E12, 4303.0], [1.6925586E12, 4749.25], [1.6925583E12, 4336.0], [1.69255728E12, 2413.0], [1.69255698E12, 2073.0], [1.69255788E12, 3735.0], [1.69255758E12, 3057.0], [1.69255848E12, 4652.0], [1.69255818E12, 4384.2], [1.69255716E12, 2037.0], [1.69255686E12, 731.25], [1.69255776E12, 4736.5], [1.69255746E12, 3670.0], [1.69255836E12, 4557.0], [1.69255806E12, 4101.0], [1.69255704E12, 1602.0499999999997], [1.69255764E12, 3215.0], [1.69255734E12, 2563.0], [1.69255824E12, 4787.0], [1.69255794E12, 3828.0], [1.69255692E12, 1062.0], [1.69255854E12, 4888.9], [1.69255752E12, 3316.45], [1.69255722E12, 2616.0], [1.69255812E12, 4115.0], [1.69255782E12, 3778.95], [1.69255842E12, 4522.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6925574E12, 2200.0], [1.6925571E12, 1091.0], [1.692558E12, 3115.0], [1.6925577E12, 2756.0], [1.6925586E12, 4546.0], [1.6925583E12, 3102.0], [1.69255728E12, 1628.0], [1.69255698E12, 961.0], [1.69255788E12, 2820.0], [1.69255758E12, 2351.0], [1.69255848E12, 3947.0], [1.69255818E12, 2930.0], [1.69255716E12, 1590.0], [1.69255686E12, 3.0], [1.69255776E12, 2939.0], [1.69255746E12, 2185.0], [1.69255836E12, 3082.0], [1.69255806E12, 3206.0], [1.69255704E12, 975.0], [1.69255764E12, 2701.0], [1.69255734E12, 1777.0], [1.69255824E12, 3344.0], [1.69255794E12, 3054.0], [1.69255692E12, 644.0], [1.69255854E12, 3740.0], [1.69255752E12, 2267.0], [1.69255722E12, 1624.0], [1.69255812E12, 3481.0], [1.69255782E12, 2516.0], [1.69255842E12, 2943.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6925574E12, 2611.0], [1.6925571E12, 1715.0], [1.692558E12, 3865.5], [1.6925577E12, 3384.0], [1.6925586E12, 4701.0], [1.6925583E12, 4233.0], [1.69255728E12, 2203.0], [1.69255698E12, 1484.0], [1.69255788E12, 3577.0], [1.69255758E12, 2969.0], [1.69255848E12, 4511.0], [1.69255818E12, 4080.0], [1.69255716E12, 1948.0], [1.69255686E12, 462.0], [1.69255776E12, 3770.0], [1.69255746E12, 2798.0], [1.69255836E12, 4344.0], [1.69255806E12, 3952.0], [1.69255704E12, 1484.0], [1.69255764E12, 3118.0], [1.69255734E12, 2442.5], [1.69255824E12, 4171.0], [1.69255794E12, 3695.0], [1.69255692E12, 909.0], [1.69255854E12, 4600.0], [1.69255752E12, 2894.0], [1.69255722E12, 2087.0], [1.69255812E12, 4005.0], [1.69255782E12, 3500.0], [1.69255842E12, 4403.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6925586E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 15.0, "minX": 1.0, "maxY": 5049.5, "series": [{"data": [[2.0, 4415.5], [3.0, 4379.0], [4.0, 3969.5], [5.0, 4166.0], [6.0, 4455.5], [7.0, 4127.0], [8.0, 4032.0], [9.0, 4080.0], [10.0, 4120.0], [11.0, 4037.0], [12.0, 3765.0], [13.0, 3655.0], [14.0, 3589.5], [15.0, 3494.0], [16.0, 3183.5], [17.0, 3189.0], [18.0, 3085.5], [19.0, 3117.5], [20.0, 3471.0], [21.0, 2542.0], [22.0, 3075.0], [23.0, 3374.0], [24.0, 3735.0], [25.0, 3589.5], [26.0, 3182.0], [27.0, 2982.0], [28.0, 2975.0], [29.0, 2078.0], [30.0, 4088.5], [31.0, 2927.5], [33.0, 2927.5], [32.0, 3581.0], [35.0, 2927.0], [34.0, 3519.0], [36.0, 2931.5], [37.0, 3267.0], [39.0, 3363.0], [38.0, 3311.0], [40.0, 3897.5], [41.0, 3086.0], [42.0, 3087.5], [43.0, 2592.5], [44.0, 2740.5], [45.0, 2710.0], [46.0, 3036.0], [47.0, 2965.0], [48.0, 3141.5], [49.0, 3093.0], [50.0, 3690.0], [51.0, 3195.0], [53.0, 2908.0], [52.0, 3444.0], [55.0, 1825.0], [54.0, 3141.5], [56.0, 3363.0], [57.0, 2369.5], [59.0, 3540.0], [58.0, 3646.0], [60.0, 3365.0], [61.0, 3551.0], [62.0, 1950.5], [63.0, 2387.5], [64.0, 1613.5], [67.0, 2134.0], [66.0, 2696.0], [65.0, 1894.0], [69.0, 2531.0], [70.0, 2601.5], [71.0, 1970.0], [68.0, 1987.0], [75.0, 2509.0], [72.0, 1708.0], [74.0, 1863.5], [73.0, 1992.0], [78.0, 2067.5], [79.0, 2022.0], [77.0, 2621.0], [76.0, 2733.5], [81.0, 1461.0], [83.0, 1486.0], [82.0, 1561.5], [80.0, 1922.5], [86.0, 1779.0], [85.0, 4269.0], [87.0, 1639.0], [84.0, 4192.0], [91.0, 1426.0], [89.0, 1286.5], [90.0, 1406.0], [88.0, 1446.0], [94.0, 1418.5], [92.0, 1181.0], [99.0, 981.0], [96.0, 1009.0], [98.0, 1058.0], [100.0, 955.0], [103.0, 958.0], [101.0, 1054.0], [102.0, 998.5], [106.0, 883.0], [111.0, 803.0], [108.0, 935.0], [109.0, 921.0], [110.0, 978.0], [112.0, 752.0], [114.0, 847.0], [113.0, 909.0], [117.0, 817.0], [118.0, 860.0], [123.0, 882.0], [121.0, 864.0], [124.0, 740.5], [127.0, 840.0], [129.0, 790.5], [135.0, 672.0], [130.0, 786.0], [137.0, 632.0], [138.0, 779.0], [145.0, 535.0], [147.0, 639.0], [150.0, 747.5], [159.0, 588.0], [153.0, 639.5], [158.0, 726.0], [157.0, 724.0], [163.0, 640.0], [162.0, 608.5], [165.0, 678.0], [169.0, 590.0], [171.0, 593.0], [178.0, 576.0], [187.0, 15.0], [184.0, 542.0], [192.0, 478.0], [197.0, 520.0], [194.0, 1084.0], [205.0, 447.0], [200.0, 496.0], [214.0, 386.0], [209.0, 406.0], [210.0, 451.5], [223.0, 277.0], [218.0, 407.0], [222.0, 440.0], [227.0, 409.0], [241.0, 113.5], [245.0, 57.0], [243.0, 193.0], [242.0, 98.5], [246.0, 112.0], [262.0, 158.5], [271.0, 226.0], [260.0, 1569.0], [277.0, 130.0], [1.0, 4333.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 5023.0], [2.0, 5030.0], [34.0, 5048.0], [36.0, 5029.0], [40.0, 5040.5], [3.0, 5027.0], [49.0, 5045.0], [57.0, 5041.0], [59.0, 5043.0], [58.0, 5043.0], [4.0, 5035.0], [68.0, 5035.0], [69.0, 5039.0], [71.0, 5049.5], [5.0, 5025.0], [6.0, 5021.5], [7.0, 5030.0], [121.0, 4269.0], [128.0, 43.0], [8.0, 5027.0], [9.0, 5023.0], [11.0, 5014.0], [194.0, 137.0], [12.0, 5029.5], [215.0, 250.0], [13.0, 5018.0], [14.0, 5026.0], [15.0, 5032.0], [260.0, 214.0], [16.0, 5026.0], [17.0, 5022.0], [18.0, 5027.0], [311.0, 256.0], [19.0, 5026.0], [20.0, 5035.5], [21.0, 5023.5], [23.0, 5026.0], [24.0, 5027.0], [25.0, 5024.0], [30.0, 5036.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 311.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 5049.5, "series": [{"data": [[2.0, 4415.5], [3.0, 4379.0], [4.0, 3969.5], [5.0, 4166.0], [6.0, 4455.5], [7.0, 4127.0], [8.0, 4032.0], [9.0, 4080.0], [10.0, 4120.0], [11.0, 4037.0], [12.0, 3764.5], [13.0, 3655.0], [14.0, 3589.5], [15.0, 3494.0], [16.0, 3183.5], [17.0, 3189.0], [18.0, 3085.5], [19.0, 3117.5], [20.0, 3471.0], [21.0, 2542.0], [22.0, 3074.5], [23.0, 3374.0], [24.0, 3735.0], [25.0, 3589.5], [26.0, 3182.0], [27.0, 2982.0], [28.0, 2975.0], [29.0, 2078.0], [30.0, 4088.5], [31.0, 2927.5], [33.0, 2927.5], [32.0, 3581.0], [35.0, 2927.0], [34.0, 3519.0], [36.0, 2931.5], [37.0, 3267.0], [39.0, 3363.0], [38.0, 3311.0], [40.0, 3897.5], [41.0, 3086.0], [42.0, 3087.5], [43.0, 2592.5], [44.0, 2740.5], [45.0, 2710.0], [46.0, 3036.0], [47.0, 2965.0], [48.0, 3141.5], [49.0, 3093.0], [50.0, 3690.0], [51.0, 3195.0], [53.0, 2908.0], [52.0, 3444.0], [55.0, 1825.0], [54.0, 3141.5], [56.0, 3363.0], [57.0, 2369.5], [59.0, 3540.0], [58.0, 3646.0], [60.0, 3365.0], [61.0, 3551.0], [62.0, 1950.5], [63.0, 2387.5], [64.0, 1613.5], [67.0, 2134.0], [66.0, 2696.0], [65.0, 1894.0], [69.0, 2531.0], [70.0, 2601.5], [71.0, 1970.0], [68.0, 1987.0], [75.0, 2509.0], [72.0, 1708.0], [74.0, 1863.5], [73.0, 1992.0], [78.0, 2067.5], [79.0, 2022.0], [77.0, 2621.0], [76.0, 2733.5], [81.0, 1461.0], [83.0, 1486.0], [82.0, 1561.5], [80.0, 1922.5], [86.0, 1779.0], [85.0, 4269.0], [87.0, 1639.0], [84.0, 4192.0], [91.0, 1426.0], [89.0, 1286.5], [90.0, 1406.0], [88.0, 1446.0], [94.0, 1418.5], [92.0, 1181.0], [99.0, 981.0], [96.0, 1009.0], [98.0, 1058.0], [100.0, 955.0], [103.0, 958.0], [101.0, 1054.0], [102.0, 998.5], [106.0, 883.0], [111.0, 803.0], [108.0, 935.0], [109.0, 921.0], [110.0, 978.0], [112.0, 752.0], [114.0, 847.0], [113.0, 909.0], [117.0, 817.0], [118.0, 860.0], [123.0, 882.0], [121.0, 864.0], [124.0, 740.5], [127.0, 840.0], [129.0, 790.5], [135.0, 672.0], [130.0, 786.0], [137.0, 632.0], [138.0, 779.0], [145.0, 535.0], [147.0, 639.0], [150.0, 747.5], [159.0, 588.0], [153.0, 639.5], [158.0, 726.0], [157.0, 724.0], [163.0, 640.0], [162.0, 608.5], [165.0, 678.0], [169.0, 590.0], [171.0, 593.0], [178.0, 576.0], [187.0, 15.0], [184.0, 542.0], [192.0, 478.0], [197.0, 520.0], [194.0, 1084.0], [205.0, 447.0], [200.0, 496.0], [214.0, 386.0], [209.0, 406.0], [210.0, 451.5], [223.0, 277.0], [218.0, 407.0], [222.0, 440.0], [227.0, 409.0], [241.0, 113.5], [245.0, 57.0], [243.0, 193.0], [242.0, 98.5], [246.0, 112.0], [262.0, 158.5], [271.0, 226.0], [260.0, 1569.0], [277.0, 130.0], [1.0, 4333.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 5023.0], [2.0, 5030.0], [34.0, 5048.0], [36.0, 5029.0], [40.0, 5040.5], [3.0, 5027.0], [49.0, 5045.0], [57.0, 5041.0], [59.0, 5043.0], [58.0, 5043.0], [4.0, 5035.0], [68.0, 5035.0], [69.0, 5039.0], [71.0, 5049.5], [5.0, 5025.0], [6.0, 5021.5], [7.0, 5030.0], [121.0, 0.0], [128.0, 0.0], [8.0, 5027.0], [9.0, 5023.0], [11.0, 5014.0], [194.0, 0.0], [12.0, 5029.5], [215.0, 0.0], [13.0, 5018.0], [14.0, 5026.0], [15.0, 5032.0], [260.0, 0.0], [16.0, 5026.0], [17.0, 5022.0], [18.0, 5027.0], [311.0, 0.0], [19.0, 5026.0], [20.0, 5035.5], [21.0, 5023.5], [23.0, 5026.0], [24.0, 5027.0], [25.0, 5024.0], [30.0, 5036.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 311.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 18.983333333333334, "minX": 1.69255686E12, "maxY": 150.9, "series": [{"data": [[1.6925574E12, 38.15], [1.6925571E12, 57.81666666666667], [1.692558E12, 24.033333333333335], [1.6925577E12, 28.0], [1.6925586E12, 19.95], [1.6925583E12, 23.516666666666666], [1.69255728E12, 44.983333333333334], [1.69255698E12, 82.66666666666667], [1.69255788E12, 28.1], [1.69255758E12, 33.5], [1.69255848E12, 21.966666666666665], [1.69255818E12, 24.583333333333332], [1.69255716E12, 51.583333333333336], [1.69255686E12, 150.9], [1.69255776E12, 25.766666666666666], [1.69255746E12, 34.016666666666666], [1.69255836E12, 23.116666666666667], [1.69255806E12, 25.116666666666667], [1.69255704E12, 66.96666666666667], [1.69255866E12, 19.966666666666665], [1.69255764E12, 31.85], [1.69255734E12, 40.5], [1.69255824E12, 23.333333333333332], [1.69255794E12, 26.933333333333334], [1.69255692E12, 101.96666666666667], [1.69255854E12, 21.5], [1.69255752E12, 34.166666666666664], [1.69255722E12, 45.65], [1.69255812E12, 24.65], [1.69255782E12, 28.333333333333332], [1.69255872E12, 18.983333333333334], [1.69255842E12, 21.966666666666665]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69255872E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.5666666666666667, "minX": 1.69255686E12, "maxY": 149.23333333333332, "series": [{"data": [[1.6925574E12, 38.15], [1.6925571E12, 57.81666666666667], [1.692558E12, 22.033333333333335], [1.6925577E12, 28.033333333333335], [1.6925586E12, 1.5666666666666667], [1.6925583E12, 23.516666666666666], [1.69255728E12, 44.983333333333334], [1.69255698E12, 62.35], [1.69255788E12, 28.1], [1.69255758E12, 33.5], [1.69255848E12, 21.966666666666665], [1.69255818E12, 24.583333333333332], [1.69255716E12, 51.583333333333336], [1.69255686E12, 149.23333333333332], [1.69255776E12, 25.733333333333334], [1.69255746E12, 34.016666666666666], [1.69255836E12, 23.116666666666667], [1.69255806E12, 25.116666666666667], [1.69255704E12, 66.96666666666667], [1.69255764E12, 31.85], [1.69255734E12, 40.5], [1.69255824E12, 20.9], [1.69255794E12, 26.933333333333334], [1.69255692E12, 101.96666666666667], [1.69255854E12, 21.5], [1.69255752E12, 34.166666666666664], [1.69255722E12, 45.65], [1.69255812E12, 24.65], [1.69255782E12, 28.333333333333332], [1.69255842E12, 21.966666666666665]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.69255698E12, 20.316666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.BindException", "isController": false}, {"data": [[1.692558E12, 2.0], [1.69255866E12, 19.966666666666665], [1.6925586E12, 18.383333333333333], [1.69255824E12, 2.433333333333333], [1.69255872E12, 18.983333333333334]], "isOverall": false, "label": "408", "isController": false}, {"data": [[1.69255872E12, 1.6666666666666667]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69255872E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.5666666666666667, "minX": 1.69255686E12, "maxY": 149.23333333333332, "series": [{"data": [[1.6925574E12, 38.15], [1.6925571E12, 57.81666666666667], [1.692558E12, 22.033333333333335], [1.6925577E12, 28.033333333333335], [1.6925586E12, 1.5666666666666667], [1.6925583E12, 23.516666666666666], [1.69255728E12, 44.983333333333334], [1.69255698E12, 62.35], [1.69255788E12, 28.1], [1.69255758E12, 33.5], [1.69255848E12, 21.966666666666665], [1.69255818E12, 24.583333333333332], [1.69255716E12, 51.583333333333336], [1.69255686E12, 149.23333333333332], [1.69255776E12, 25.733333333333334], [1.69255746E12, 34.016666666666666], [1.69255836E12, 23.116666666666667], [1.69255806E12, 25.116666666666667], [1.69255704E12, 66.96666666666667], [1.69255764E12, 31.85], [1.69255734E12, 40.5], [1.69255824E12, 20.9], [1.69255794E12, 26.933333333333334], [1.69255692E12, 101.96666666666667], [1.69255854E12, 21.5], [1.69255752E12, 34.166666666666664], [1.69255722E12, 45.65], [1.69255812E12, 24.65], [1.69255782E12, 28.333333333333332], [1.69255842E12, 21.966666666666665]], "isOverall": false, "label": "POST - /usuarios-success", "isController": false}, {"data": [[1.692558E12, 2.0], [1.69255866E12, 19.966666666666665], [1.6925586E12, 18.383333333333333], [1.69255824E12, 2.433333333333333], [1.69255872E12, 20.65], [1.69255698E12, 20.316666666666666]], "isOverall": false, "label": "POST - /usuarios-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69255872E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.5666666666666667, "minX": 1.69255686E12, "maxY": 149.23333333333332, "series": [{"data": [[1.6925574E12, 38.15], [1.6925571E12, 57.81666666666667], [1.692558E12, 22.033333333333335], [1.6925577E12, 28.033333333333335], [1.6925586E12, 1.5666666666666667], [1.6925583E12, 23.516666666666666], [1.69255728E12, 44.983333333333334], [1.69255698E12, 62.35], [1.69255788E12, 28.1], [1.69255758E12, 33.5], [1.69255848E12, 21.966666666666665], [1.69255818E12, 24.583333333333332], [1.69255716E12, 51.583333333333336], [1.69255686E12, 149.23333333333332], [1.69255776E12, 25.733333333333334], [1.69255746E12, 34.016666666666666], [1.69255836E12, 23.116666666666667], [1.69255806E12, 25.116666666666667], [1.69255704E12, 66.96666666666667], [1.69255764E12, 31.85], [1.69255734E12, 40.5], [1.69255824E12, 20.9], [1.69255794E12, 26.933333333333334], [1.69255692E12, 101.96666666666667], [1.69255854E12, 21.5], [1.69255752E12, 34.166666666666664], [1.69255722E12, 45.65], [1.69255812E12, 24.65], [1.69255782E12, 28.333333333333332], [1.69255842E12, 21.966666666666665]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.692558E12, 2.0], [1.69255866E12, 19.966666666666665], [1.6925586E12, 18.383333333333333], [1.69255824E12, 2.433333333333333], [1.69255872E12, 20.65], [1.69255698E12, 20.316666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69255872E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

